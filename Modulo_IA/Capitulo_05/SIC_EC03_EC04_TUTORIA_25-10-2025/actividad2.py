# -*- coding: utf-8 -*-
"""Actividad2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EPZY2u2A8ihg4KSterxreB765kclec9X
"""

#1.- Importar librerias

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

url="https://raw.githubusercontent.com/selva86/datasets/master/Advertising.csv"
df = pd.read_csv(url, index_col=0)
print("=== DATASET ====")
print(df.head())
print("  "*50)

#Normalizar nombres
df.columns = [c.strip().lower() for c in df.columns]

print("======== INFORMACION GENERAL =========")
print(df.info(), "\n")

#Verificar datos nulos

print("CONTEO DE VALORES NULOS")
print(df.isnull().sum())

#DIVIDIR CONJUNTO DE DATOS
X= df.drop("sales",axis=1) #features
y=df["sales"] #Objetivo= ventas

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

print(f"Datos de entrenamiento: {X_train.shape}, {y_train.shape}")
print(f"Datos de prueba: {X_test.shape}, {y_test.shape}\n")

#Escalamiento de características
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled  = scaler.transform(X_test)

#Creacion y entrenamiento del modelo
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Coeficientes del modelo
print("======== COEFICIENTES DEL MODELO ========")
for col, coef in zip(X_train.columns, model.coef_):
    print(f"{col.capitalize()}: {coef:.4f}")
print(f"Intercepto: {model.intercept_:.4f}\n")

#Prediccion
y_pred = model.predict(X_test_scaled)

print("Predicciones iniciales:")
print(y_pred[10])

#Evaluacion del modelo

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2=r2_score(y_test,y_pred)


print("======== EVALUACIÓN ========")
print(f"MSE : {mse:.3f}")
print(f"RMSE: {rmse:.3f}")
print(f"R²  : {r2:.3f}\n")

# Prediccion
# Verifica columnas y orden del X_train
print("Cols X_train:", list(X_train.columns))

# Crea la fila nueva con EXACTAMENTE esas columnas y en ese orden
nueva_inversion = pd.DataFrame([[200.0, 40.0, 60.0]], columns=list(X_train.columns))

# Escala y predice con el modelo ya entrenado
nueva_inversion_scaled = scaler.transform(nueva_inversion)
prediccion = model.predict(nueva_inversion_scaled)

print("======== PREDICCIÓN DE VENTAS FUTURAS ========")
print(f"Con TV={nueva_inversion['tv'][0]}, Radio={nueva_inversion['radio'][0]}, Newspaper={nueva_inversion['newspaper'][0]}")
print(f"Ventas estimadas: {prediccion[0]:.2f} ")


#Aporte separado
# Valores base (puedes cambiarlos)
tv_base = 200
radio_base = 40
newspaper_base = 60

# Asegura el mismo orden de columnas que en el entrenamiento
cols = list(X_train.columns)

# Predicción conjunta (con los tres medios)
nueva_inversion = pd.DataFrame([[tv_base, radio_base, newspaper_base]], columns=cols)
pred_total = model.predict(scaler.transform(nueva_inversion))[0]

# Predicciones aisladas (solo un medio a la vez; el resto en 0)
tv_only     = pd.DataFrame([[tv_base, 0, 0]], columns=cols)
radio_only  = pd.DataFrame([[0, radio_base, 0]], columns=cols)
news_only   = pd.DataFrame([[0, 0, newspaper_base]], columns=cols)

pred_tv     = model.predict(scaler.transform(tv_only))[0]
pred_radio  = model.predict(scaler.transform(radio_only))[0]
pred_news   = model.predict(scaler.transform(news_only))[0]

print("======== APORTE POR MEDIO (aislado) ========")
print(f"TV solo ({tv_base}): {pred_tv:.2f} unidades")
print(f"Radio solo ({radio_base}): {pred_radio:.2f} unidades")
print(f"Newspaper solo ({newspaper_base}): {pred_news:.2f} unidades")

# Evaluar CSV
#Regresion lineal multiple
#Predecir ventas futuros apartir del rpesupuesto de publicidad y de cada medio, TV,RADIO